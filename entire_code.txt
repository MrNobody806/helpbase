📦 helpbase
🖥️ c:\Users\Top G\Desktop\helpbase\Helpbase\src
📂 src
┣ 📂 app
┓ ┣ 📂 (auth)
┓ ┓ ┣ 📂 login
┓ ┓ ┓ ┗ 📄 page.tsx
┓ ┓ ┗ 📂 signup
┓ ┓   ┗ 📄 page.tsx
┓ ┣ 📂 api
┓ ┓ ┗ 📂 auth
┓ ┓   ┣ 📂 login
┓ ┓   ┓ ┗ 📄 route.ts
┓ ┓   ┗ 📂 signup
┓ ┓     ┗ 📄 route.ts
┓ ┣ 📄 favicon.ico
┓ ┣ 📄 globals.css
┓ ┣ 📄 layout.tsx
┓ ┗ 📄 page.tsx
┣ 📂 components
┓ ┣ 📂 providers
┓ ┓ ┗ 📄 providers.tsx
┓ ┗ 📂 ui
┓   ┣ 📄 Button.tsx
┓   ┣ 📄 Card.tsx
┓   ┣ 📄 Input.tsx
┓   ┗ 📄 Navbar.tsx
┗ 📂 lib
  ┣ 📄 auth.ts
  ┣ 📄 chatwoot.ts
  ┣ 📄 middleware.ts
  ┣ 📄 supabaseAdmin.ts
  ┣ 📄 supabaseClient.ts
  ┗ 📄 utils.ts


📄 c:\Users\Top G\Desktop\helpbase\Helpbase\src\app\(auth)\login\page.tsx
// src/app/auth/login/page.tsx
"use client";
import { useState } from "react";
import axios from "axios";
import { supabaseClient } from "@/lib/supabaseClient";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [busy, setBusy] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // In your login page - update the handleSubmit function
  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    setBusy(true);
    setError(null);

    try {
      // Step 1: Sign in to our app
      const { data: signInData, error: signInError } =
        await supabaseClient.auth.signInWithPassword({
          email,
          password,
        });

      if (signInError) throw signInError;

      const token = signInData.session?.access_token;
      if (!token) throw new Error("No session token");

      // Step 2: Get SSO URL from our API
      const loginResponse = await axios.post("/api/auth/login", {
        access_token: token,
      });

      if (loginResponse.data?.error) {
        throw new Error(loginResponse.data.error);
      }

      // Step 3: Redirect to Chatwoot via SSO (auto-login)
      if (loginResponse.data.ssoUrl) {
        window.location.href = loginResponse.data.ssoUrl;
      } else {
        window.location.href = loginResponse.data.dashboardUrl;
      }
    } catch (err: any) {
      console.error("Login error:", err);
      setError(
        err.message || "Failed to sign in. Please check your credentials."
      );
    } finally {
      setBusy(false);
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="w-full max-w-md p-8 space-y-8 bg-white rounded-xl shadow-2xl">
        <div className="text-center">
          <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
            Sign in to Helpbase
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            Welcome back! Access your customer support dashboard.
          </p>
        </div>
        <form className="mt-8 space-y-6 text-black" onSubmit={handleSubmit}>
          {error && (
            <div
              className="p-3 text-sm font-medium text-red-700 bg-red-100 border border-red-200 rounded-md"
              role="alert"
            >
              {error}
            </div>
          )}

          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email-address" className="sr-only">
                Email address
              </label>
              <input
                id="email-address"
                name="email"
                type="email"
                autoComplete="email"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="Email address"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>

          <div className="flex items-center justify-between">
            {/* You might add a "Forgot Password" link here */}
            <div className="text-sm">
              <a
                href="#"
                className="font-medium text-indigo-600 hover:text-indigo-500"
              >
                Forgot your password?
              </a>
            </div>
          </div>

          <button
            type="submit"
            className={`group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-md text-white transition-colors duration-200 ${
              busy
                ? "bg-indigo-400 cursor-not-allowed"
                : "bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            }`}
            disabled={busy}
          >
            {busy ? "Signing In..." : "Sign in"}
          </button>

          <div className="text-center">
            <a
              href="/auth/signup"
              className="font-medium text-indigo-600 hover:text-indigo-500"
            >
              Don't have an account? Sign up.
            </a>
          </div>
        </form>
      </div>
    </div>
  );
}


📄 c:\Users\Top G\Desktop\helpbase\Helpbase\src\app\(auth)\signup\page.tsx
// src/app/auth/signup/page.tsx
"use client";
import { useState } from "react";
import axios from "axios";
import { supabaseClient } from "@/lib/supabaseClient";

const PASSWORD_REGEX =
  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{}|\\",./`<>:;?~]).{6,}$/;
const PASSWORD_REQUIREMENTS =
  "Must be 6+ chars, and include uppercase, lowercase, number, and special character.";

export default function SignupPage() {
  const [fullName, setFullName] = useState("");
  const [companyName, setCompanyName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [busy, setBusy] = useState(false);
  const [error, setError] = useState<string | null>(null);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    setBusy(true);
    setError(null);

    if (!PASSWORD_REGEX.test(password)) {
      setError(PASSWORD_REQUIREMENTS);
      setBusy(false);
      return;
    }

    try {
      const signupResponse = await axios.post("/api/auth/signup", {
        full_name: fullName,
        company_name: companyName,
        email,
        password,
      });

      if (signupResponse.data?.error) {
        throw new Error(signupResponse.data.error);
      }

      const { data: signInData, error: signInError } =
        await supabaseClient.auth.signInWithPassword({
          email,
          password,
        });

      if (signInError) throw signInError;

      if (signupResponse.data.ssoUrl) {
        window.location.href = signupResponse.data.ssoUrl;
      } else {
        window.location.href = signupResponse.data.dashboardUrl;
      }
    } catch (err: any) {
      console.error("Signup error:", err);
      setError(err.message || "Failed to create account. Please try again.");
    } finally {
      setBusy(false);
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md">
        {/* Logo/Brand */}
        <div className="text-center mb-8">
          <div className="mx-auto h-12 w-12 bg-indigo-600 rounded-lg flex items-center justify-center">
            <span className="text-white font-bold text-xl">H</span>
          </div>
          <h2 className="mt-4 text-3xl font-bold text-gray-900">
            Join Helpbase
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            Start delivering exceptional customer support
          </p>
        </div>

        {/* Card */}
        <div className="bg-white rounded-2xl shadow-xl p-8">
          <form className="space-y-6 text-black" onSubmit={handleSubmit}>
            {/* Error Message */}
            {error && (
              <div className="rounded-lg bg-red-50 p-4 border border-red-200">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg
                      className="h-5 w-5 text-red-400"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fillRule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z"
                        clipRule="evenodd"
                      />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm font-medium text-red-800">{error}</p>
                  </div>
                </div>
              </div>
            )}

            {/* Form Fields */}
            <div className="space-y-4">
              {/* Full Name */}
              <div>
                <label
                  htmlFor="full-name"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  Full Name
                </label>
                <input
                  id="full-name"
                  name="full-name"
                  type="text"
                  required
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-200 placeholder-gray-400"
                  placeholder="Enter your full name. Eg., Bruce Wayne"
                  value={fullName}
                  onChange={(e) => setFullName(e.target.value)}
                />
              </div>

              {/* Company Name */}
              <div>
                <label
                  htmlFor="company-name"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  Company Name
                </label>
                <input
                  id="company-name"
                  name="company-name"
                  type="text"
                  required
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-200 placeholder-gray-400"
                  placeholder="Enter your company name. Eg., Wayne Enterprises"
                  value={companyName}
                  onChange={(e) => setCompanyName(e.target.value)}
                />
              </div>

              {/* Email */}
              <div>
                <label
                  htmlFor="email-address"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  Work Email
                </label>
                <input
                  id="email-address"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-200 placeholder-gray-400"
                  placeholder="Enter your work email address"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
                <p className="mt-2 text-xs text-gray-500">
                  Please enter a valid work email address.
                </p>
              </div>

              {/* Password */}
              <div>
                <label
                  htmlFor="password"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  Password
                </label>
                <input
                  id="password"
                  name="password"
                  type="password"
                  autoComplete="new-password"
                  required
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-200 placeholder-gray-400"
                  placeholder="Create a secure password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                />
                <p className="mt-2 text-xs text-gray-500">
                  {PASSWORD_REQUIREMENTS}
                </p>
              </div>
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              disabled={busy}
              className={`w-full flex justify-center py-3.5 px-4 border border-transparent rounded-lg shadow-sm text-sm font-semibold text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200 ${
                busy
                  ? "bg-indigo-400 cursor-not-allowed"
                  : "bg-indigo-600 hover:bg-indigo-700 hover:shadow-md"
              }`}
            >
              {busy ? (
                <span className="flex items-center">
                  <svg
                    className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle
                      className="opacity-25"
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      strokeWidth="4"
                    ></circle>
                    <path
                      className="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    ></path>
                  </svg>
                  Creating Account...
                </span>
              ) : (
                "Create Account"
              )}
            </button>

            {/* Terms and Sign In Link */}
            <div className="text-center pt-4">
              <p className="text-xs text-gray-600 mb-2">
                By creating an account, you agree to our{" "}
                <a
                  href="#"
                  className="font-medium text-indigo-600 hover:text-indigo-500 transition-colors duration-200"
                >
                  T & C
                </a>{" "}
                and{" "}
                <a
                  href="#"
                  className="font-medium text-indigo-600 hover:text-indigo-500 transition-colors duration-200"
                >
                  Privacy policy
                </a>
              </p>
              <p className="text-sm text-gray-600">
                Already have an account?{" "}
                <a
                  href="/auth/login"
                  className="font-medium text-indigo-600 hover:text-indigo-500 transition-colors duration-200"
                >
                  Login to Helpbase
                </a>
              </p>
            </div>
          </form>
        </div>

        {/* Features List */}
        <div className="mt-8 text-center">
          <div className="grid grid-cols-3 gap-4 text-xs text-gray-600">
            <div className="flex flex-col items-center">
              <div className="h-8 w-8 bg-green-100 rounded-full flex items-center justify-center mb-1">
                <span className="text-green-600 font-bold">✓</span>
              </div>
              <span>Live Chat</span>
            </div>
            <div className="flex flex-col items-center">
              <div className="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center mb-1">
                <span className="text-blue-600 font-bold">✓</span>
              </div>
              <span>Team Inbox</span>
            </div>
            <div className="flex flex-col items-center">
              <div className="h-8 w-8 bg-purple-100 rounded-full flex items-center justify-center mb-1">
                <span className="text-purple-600 font-bold">✓</span>
              </div>
              <span>Analytics</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


📄 c:\Users\Top G\Desktop\helpbase\Helpbase\src\app\api\auth\login\route.ts
// src/app/api/auth/login/route.ts
import { NextResponse } from "next/server";
import { supabaseAdmin } from "@/lib/supabaseAdmin";
import { generateChatwootSSO } from "@/lib/chatwoot";

export async function POST(req: Request) {
  try {
    const { access_token } = await req.json();

    // Verify the Supabase session
    const {
      data: { user },
      error,
    } = await supabaseAdmin.auth.getUser(access_token);
    if (error || !user) {
      throw new Error("Invalid session");
    }

    // Get the Chatwoot mapping for this user
    const { data: mapping, error: mappingError } = await supabaseAdmin
      .from("chatwoot_mappings")
      .select("account_id, user_account_id")
      .eq("user_id", user.id)
      .single();

    if (mappingError || !mapping) {
      throw new Error("Chatwoot account not found. Please contact support.");
    }

    // Generate SSO URL with both accountId and user_account_id
    const ssoUrl = await generateChatwootSSO(
      mapping.account_id,
      mapping.user_account_id
    );

    const dashboardUrl = `${process.env.NEXT_PUBLIC_DASHBOARD_URL}/app/accounts/${mapping.account_id}/dashboard`;

    return NextResponse.json({
      success: true,
      ssoUrl,
      dashboardUrl,
    });
  } catch (error: any) {
    console.error("Login error:", error);
    return NextResponse.json(
      {
        error: error.message || "Authentication failed",
      },
      { status: 500 }
    );
  }
}


📄 c:\Users\Top G\Desktop\helpbase\Helpbase\src\app\api\auth\signup\route.ts
// src/app/api/auth/signup/route.ts
import { NextResponse } from "next/server";
import { supabaseAdmin } from "@/lib/supabaseAdmin";
import {
  createChatwootAccount,
  createChatwootPlatformUser,
  createAccountUserLink,
  generateChatwootSSO,
} from "@/lib/chatwoot";

// const getStripe = () => {
//   if (process.env.STRIPE_SECRET_KEY) {
//     const Stripe = require("stripe");
//     return new Stripe(process.env.STRIPE_SECRET_KEY, {
//       apiVersion: "2023-10-16",
//     });
//   }
//   return null;
// };

type Body = {
  full_name: string;
  company_name: string;
  email: string;
  password?: string;
};

export async function POST(req: Request) {
  try {
    const body: Body = await req.json();
    const { full_name, company_name, email, password } = body;

    if (!full_name || !company_name || !email || !password) {
      return NextResponse.json(
        {
          error:
            "Missing required fields: full_name, company_name, email, and password",
        },
        { status: 400 }
      );
    }

    // Step 1: Create Supabase Auth user
    const createUser = await supabaseAdmin.auth.admin.createUser({
      email,
      password: password,
      email_confirm: true,
      user_metadata: { full_name, company_name },
    });

    if (createUser.error) throw createUser.error;
    const authUser = createUser.data.user;
    if (!authUser || !authUser.id) {
      throw new Error("Could not create auth user");
    }

    const userId = authUser.id;

    // // Step 2: Create Stripe customer
    // let stripeCustomerId = null;
    // const stripe = getStripe();

    // if (stripe) {
    //   try {
    //     const customer = await stripe.customers.create({
    //       email,
    //       name: full_name,
    //       metadata: {
    //         supabase_user_id: userId,
    //         company_name: company_name,
    //       },
    //     });
    //     stripeCustomerId = customer.id;
    //   } catch (stripeError) {
    //     console.error("Stripe customer creation failed:", stripeError);
    //   }
    // }

    // Step 3: Create user in public.users
    const upsertUser = await supabaseAdmin.from("users").insert({
      id: userId,
      email,
      full_name,
      company_name,
      role: "administrator",
      // stripe_customer_id: stripeCustomerId,
    });

    if (upsertUser.error) {
      console.error("Database error:", upsertUser.error);
      throw upsertUser.error;
    }

    // Step 4: Create starter subscription
    const subResp = await supabaseAdmin.from("subscriptions").insert({
      user_id: userId,
      plan: "starter",
      status: "active",
      current_period_end: null,
    });

    if (subResp.error) throw subResp.error;

    // Step 5: Create Chatwoot Account and User
    const accountName = company_name;
    const accountResp = await createChatwootAccount(accountName, email);
    const accountId = Number(accountResp?.id || accountResp?.data?.id);

    if (!accountId) {
      throw new Error(
        "Failed to create Chatwoot account: No account ID returned"
      );
    }

    // Create Chatwoot platform user
    const userResp = await createChatwootPlatformUser(
      full_name,
      email,
      password
    );
    const platformUserId = Number(userResp?.id || userResp?.data?.id);

    if (!platformUserId) {
      throw new Error("Failed to create Chatwoot user: No user ID returned");
    }

    // Associate platform user to account as administrator
    await createAccountUserLink(accountId, platformUserId);

    // Step 6: Store the mapping
    const mappingResp = await supabaseAdmin.from("chatwoot_mappings").insert({
      user_id: userId,
      account_id: accountId,
      user_account_id: platformUserId,
    });

    if (mappingResp.error) throw mappingResp.error;

    // Step 7: Generate SSO URL with both accountId and platformUserId
    const ssoUrl = await generateChatwootSSO(accountId, platformUserId);

    const dashboardUrl = `${process.env.NEXT_PUBLIC_DASHBOARD_URL}/app/accounts/${accountId}/dashboard`;

    return NextResponse.json({
      success: true,
      user_id: userId,
      email,
      dashboardUrl,
      ssoUrl,
    });
  } catch (err: any) {
    console.error("signup error:", err);
    return NextResponse.json(
      { error: err.message || String(err) },
      { status: 500 }
    );
  }
}


📄 c: \Users\Top G\Desktop\helpbase\Helpbase\src\app\favicon.ico

  c:\Users\Top G\Desktop\helpbase\Helpbase\.env

# PUBLIC (safe to expose)
NEXT_PUBLIC_SUPABASE_URL=https://movfojvxpvdtinnaakqr.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1vdmZvanZ4cHZkdGlubmFha3FyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAzMzU5MzEsImV4cCI6MjA3NTkxMTkzMX0.HZ7f0YD36krkJZNO8B1lPRkl-z0CsGJxD8ZOyH842HU
NEXT_PUBLIC_API_URL=https://localhost:3000
NEXT_PUBLIC_DASHBOARD_URL=https://app.helpbase.co

# SERVER (never expose to browser)
SUPABASE_URL=https://movfojvxpvdtinnaakqr.supabase.co
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1vdmZvanZ4cHZkdGlubmFha3FyIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDMzNTkzMSwiZXhwIjoyMDc1OTExOTMxfQ.kZESijHkpnlumO7-tyomg9zmADK60iABMCNbUWAxkQg
CHATWOOT_BASE_URL=http://151.80.60.99:3000
CHATWOOT_PLATFORM_TOKEN=7nTc2fkXVtLBc2WEweChdfUR

c: \Users\Top G\Desktop\helpbase\Helpbase\next.config.js
// next.config.js
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  output: "export",
  trailingSlash: true,
  images: {
    unoptimized: true, // Required for Cloudflare Pages
  },
  // Remove any API routes, middleware, or server-side features
  env: {
    // Public environment variables will be injected by Cloudflare
  },
};

export default nextConfig;


